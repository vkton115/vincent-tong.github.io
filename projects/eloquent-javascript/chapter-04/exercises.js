////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  //output array
  var range = [];
  //edge case
  if (start === end){
    return [];
  }
  if (step === undefined){
    for (let i = start; i <= end; i++){
      range.push(i);
    }
    //if step is passed in
  } else {
    if (step < 0){
      return [];
    } else {
      for (let i = start; i <= end; i += step){
        range.push(i);
      }
    }
  }
  return range;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  var sum = 0;
  for (let i = 0; i < array.length; i++){
    sum += array[i];
  }
  return sum;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  //create output array
  var reversed = [];
  for (let i = array.length -1; i >= 0; i--){
    reversed.push(array[i]);
  }
  return reversed;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  if (array.length % 2 === 0){
    for (let i = 0; i < array.length/2; i++){
      var temp = array[i];
      array[i] = array[array.length - 1 - i]
      array[array.length - 1 - i] = temp;
    }
  } else {
    //math.floor rounds it down because nothing needs to happen to the middle value
    for (let i = 0; i < Math.floor(array.length/2); i++){
      var temp = array[i];
      array[i] = array[array.length -1 - i];
      array[array.length - 1 - i] = temp;
    }
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {

  var rest = null;

  for (var i = array.length -1; i >=0; i--){
    rest = { value: array[i], rest}
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  var arr = [];
  for (let node = list; node; node = node.rest){
    arr.push(node.value);
  }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  return {
    value: element,
    rest: list
  };
}
////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
  //base
  if (n === 0){
    return list.value;
  } else if (n < 0){
    return undefined;
  }
  //recursion
  return nth(list.rest, n - 1);
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
