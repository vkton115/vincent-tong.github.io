// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

// const { characterScript } = require("./helpers");

function flatten(array) {
  return array.reduce(function(accumulator, arrays){
    return accumulator.concat(arrays);;
  })
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(value, test, update, body) {
  for (let i = value; test(i); i = update(i)){
    body(i);
  }
}


// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////


function every(array, test) {
  for (let i = 0; i < array.length; i++){
    if (!test(array[i])){
      return false;
    }
  } return true;
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(str) {
  const arr = countBy(str, function(char){
    //get unicode value for the current character
    const unicode = char.charCodeAt();
    //find the script from the unicode character
    const script = characterScript(unicode);
    //returning the name of script direction or null
    if (script !== null){
      return script.direction;
    } else {
      return script;
    }
  });
  //find the highest count by sorting
  arr.sort(function (a, b){
    return b.count - a.count;
  })
  return arr[0].name
}


// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
